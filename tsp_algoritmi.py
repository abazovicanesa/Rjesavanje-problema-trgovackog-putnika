# -*- coding: utf-8 -*-
"""TSP algoritmi

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pvKg7O1uWV-nyMz6R0xksP-KFkarkVRz

BRUTE FORCE
"""

import itertools
import numpy as np
import matplotlib.pyplot as plt

def calculate_distance(city1, city2):
    return np.linalg.norm(np.array(city1) - np.array(city2))

def total_distance(cities, path):
    distance = sum(calculate_distance(cities[path[i]], cities[path[i + 1]]) for i in range(len(path) - 1))
    distance += calculate_distance(cities[path[-1]], cities[path[0]])
    return distance

def brute_force_tsp(cities):
    n = len(cities)
    min_path, min_distance = min(
        ((perm, total_distance(cities, perm)) for perm in itertools.permutations(range(n))),
        key=lambda x: x[1]
    )
    return min_path, min_distance

cities = [
    (42.4303, 19.2594), (42.7805, 18.9562), (42.4572, 18.5315), (42.0912, 19.0899),
    (42.2911, 18.8403), (42.3931, 18.9116), (42.4207, 18.7683), (42.4319, 18.6986),
    (41.9311, 19.2148), (43.0369, 19.7562), (42.8205, 19.5241)
]

city_labels = ['Podgorica', 'Nikšić', 'Herceg Novi', 'Bar', 'Budva', 'Cetinje', 'Kotor', 'Tivat', 'Ulcinj', 'Bijelo Polje', 'Kolašin']

min_path, min_distance = brute_force_tsp(cities)
print("Najkraća putanja:", [city_labels[i] for i in min_path])
print("Ukupna dužina putanje:", min_distance)

def plot_tsp_path(cities, path, labels):
    x = [cities[i][1] for i in path] + [cities[path[0]][1]]
    y = [cities[i][0] for i in path] + [cities[path[0]][0]]
    plt.plot(x, y, 'bo-')
    plt.scatter(x, y, c='red')
    for i, city in enumerate(path):
        plt.annotate(labels[city], (x[i], y[i]), textcoords="offset points", xytext=(0,10), ha='center')
    plt.xlabel('Geografska dužina')
    plt.ylabel('Geografska širina')
    plt.title('Putanja Trgovačkog Putnika po Crnoj Gori (Brute Force)')
    plt.show()

plot_tsp_path(cities, min_path, city_labels)

"""NEAREST NEIGHBOR"""

import numpy as np
import matplotlib.pyplot as plt

def calculate_distance(city1, city2):
    return np.linalg.norm(np.array(city1) - np.array(city2))

def nearest_neighbor_tsp(cities):
    n = len(cities)
    unvisited = list(range(n))
    path = [unvisited.pop(0)]  #Kreće od prvog grada

    while unvisited:
        current_city = path[-1]
        nearest_city = min(unvisited, key=lambda city: calculate_distance(cities[current_city], cities[city]))
        unvisited.remove(nearest_city)
        path.append(nearest_city)

    return path

def total_distance(cities, path):
    return sum(calculate_distance(cities[path[i]], cities[path[i + 1]]) for i in range(len(path) - 1)) + \
           calculate_distance(cities[path[-1]], cities[path[0]])  # Povratak u početni grad

def plot_tsp_path(cities, path, labels):
    x = [cities[i][1] for i in path] + [cities[path[0]][1]]
    y = [cities[i][0] for i in path] + [cities[path[0]][0]]
    plt.plot(x, y, 'bo-')
    plt.scatter(x, y, c='red')
    for i, city in enumerate(path):
        plt.annotate(labels[city], (x[i], y[i]), textcoords="offset points", xytext=(0,10), ha='center')
    plt.xlabel('Geografska dužina')
    plt.ylabel('Geografska širina')
    plt.title('Putanja Trgovačkog Putnika po Crnoj Gori (Nearest Neighbor)')
    plt.show()

cities = [
    (42.4303, 19.2594),  # Podgorica
    (42.7805, 18.9562),  # Nikšić
    (42.4572, 18.5315),  # Herceg Novi
    (42.0912, 19.0899),  # Bar
    (42.2911, 18.8403),  # Budva
    (42.3931, 18.9116),  # Cetinje
    (42.4207, 18.7683),  # Kotor
    (42.4319, 18.6986),  # Tivat
    (41.9311, 19.2148),  # Ulcinj
    (43.0369, 19.7562),  # Bijelo Polje
    (42.8205, 19.5241)   # Kolašin
]

city_labels = ['Podgorica', 'Nikšić', 'Herceg Novi', 'Bar', 'Budva', 'Cetinje', 'Kotor', 'Tivat', 'Ulcinj', 'Bijelo Polje', 'Kolašin']

path = nearest_neighbor_tsp(cities)
distance = total_distance(cities, path)
print("Najkraća putanja:", [city_labels[i] for i in path])
print("Ukupna dužina putanje:", distance)

plot_tsp_path(cities, path, city_labels)